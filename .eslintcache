{"C:\\Users\\yoh268\\Documents\\Workdir\\tutorial\\node\\react-file-size\\spec\\helpers.js":{"size":184,"mtime":1486223251488,"hashOfConfig":"6fd0c94bd84c9d4684b18db293161a84","results":{"filePath":"C:\\Users\\yoh268\\Documents\\Workdir\\tutorial\\node\\react-file-size\\spec\\helpers.js","messages":[],"errorCount":0,"warningCount":0,"output":"import { isObject } from \"lodash\";\n\nexport function isPromise( promise ) {\n\treturn isObject( promise ) &&\n\t\tpromise.then instanceof Function &&\n\t\tpromise.catch instanceof Function;\n}\n"}},"C:\\Users\\yoh268\\Documents\\Workdir\\tutorial\\node\\react-file-size\\src\\utils.js":{"size":2180,"mtime":1486223251634,"hashOfConfig":"6fd0c94bd84c9d4684b18db293161a84","results":{"filePath":"C:\\Users\\yoh268\\Documents\\Workdir\\tutorial\\node\\react-file-size\\src\\utils.js","messages":[],"errorCount":0,"warningCount":0,"output":"import fs from \"fs\";\nimport request from \"request-promise\";\nimport cheerio from \"cheerio\";\nimport gzipSize from \"gzip-size\";\nimport when from \"when\";\n\nexport function scrapeVersions( $ ) {\n\treturn $( \".version-selector option\" )\n\t\t.get().map( el => el.attribs.value )\n\t\t.filter( el => !\\x7eel.indexOf( \"-\" ) )\n\t\t.reverse();\n}\n\nexport function getVersions( uri ) {\n\treturn request( {\n\t\turi,\n\t\ttransform( body ) {\n\t\t\treturn cheerio.load( body );\n\t\t}\n\t} ).then( $ => {\n\t\treturn scrapeVersions( $ );\n\t} );\n}\n\nexport function getFile( name, version, path, url, spinner ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tif ( fileExists( path ) ) {\n\t\t\tconst body = fs.readFileSync( path, \"utf8\" );\n\t\t\tspinner.text = `${ name } v${ version }`;\n\t\t\tresolve( { name, version, path, url, body } );\n\t\t} else {\n\t\t\trequest( { url, encoding: null } ).then( body => {\n\t\t\t\tfs.writeFile( path, body, e => {\n\t\t\t\t\tspinner.text = `${ name } v${ version }`;\n\t\t\t\t\tresolve( { name, version, path, url, body } );\n\t\t\t\t} );\n\t\t\t} ).catch( error => {\n\t\t\t\tspinner.text = `${ name } v${ version }`;\n\t\t\t\tresolve( { name, version, path, url, body: \"\" } );\n\t\t\t} );\n\t\t}\n\t} );\n}\n\nexport function getStatistics( name, versions, spinner ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tspinner.text = `Getting statistics for ${ name }...`;\n\t\tconst promises = versions.reduce( ( memo, version ) => {\n\t\t\tmemo.push( getFile( `${ name }.js`, version, `vendor/${ name }-${ version }.js`, `https://cdnjs.cloudflare.com/ajax/libs/react/${ version }/${ name }.js`, spinner ) );\n\t\t\tmemo.push( getFile( `${ name }.min.js`, version, `vendor/${ name }-${ version }.min.js`, `https://cdnjs.cloudflare.com/ajax/libs/react/${ version }/${ name }.min.js`, spinner ) );\n\t\t\treturn memo;\n\t\t}, [] );\n\t\tresolve( when.reduce( promises, ( memo, value ) => {\n\t\t\tmemo.push( {\n\t\t\t\tname: value.name,\n\t\t\t\tversion: value.version,\n\t\t\t\tpath: value.path,\n\t\t\t\turl: value.url,\n\t\t\t\tsize: value.body.length,\n\t\t\t\tsizeGzipped: value.body.length ? gzipSize.sync( value.body ) : 0\n\t\t\t} );\n\t\t\treturn memo;\n\t\t}, [] ) );\n\t} );\n}\n\nexport function fileExists( path ) {\n\ttry {\n\t\treturn fs.statSync( path ).isFile();\n\t} catch ( error ) {\n\t\treturn false;\n\t}\n}\n"}}}